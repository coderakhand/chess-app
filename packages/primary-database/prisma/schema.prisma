generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  email        String    @unique
  password     String
  rapidRating  Int       @default(800) @map("rating")
  bulletRating Int       @default(800)
  blitzRating  Int       @default(800)
  createdAt    DateTime  @default(now())
  lastLogin    DateTime?
  gamesAsBlack Game[]    @relation("BlackGames")
  gamesAsWhite Game[]    @relation("WhiteGames")
  userSettings Settings?

  @@index([rapidRating, bulletRating, blitzRating])
}

model Settings {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  premove            Boolean @default(false)
  autoPromoteToQueen Boolean @default(false)
}

model Guest {
  id           String   @id @default(uuid())
  rating       Int      @default(800)
  createdAt    DateTime @default(now())
  gamesAsBlack Game[]   @relation("GuestBlackGames")
  gamesAsWhite Game[]   @relation("GuestWhiteGames")

  @@index([rating])
}

model Game {
  id                    String       @id @default(uuid())
  whiteUserId           String?
  whiteGuestId          String?
  blackUserId           String?
  blackGuestId          String?
  startingPosition      String       @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
  currentPosition       String?
  timeControl           TimeControl?
  createdAt             DateTime     @default(now())
  status                GameStatus
  result                GameResult?
  baseTime              Int?
  increment             Int?
  blackGuest            Guest?       @relation("GuestBlackGames", fields: [blackGuestId], references: [id])
  blackUser             User?        @relation("BlackGames", fields: [blackUserId], references: [id])
  whiteGuest            Guest?       @relation("GuestWhiteGames", fields: [whiteGuestId], references: [id])
  whiteUser             User?        @relation("WhiteGames", fields: [whiteUserId], references: [id])
  moves                 Move[]
  whitePlayerRating     Int?
  blackPlayerRating     Int?
  whiteUserRatingChange Int?
  blackUserRatingChange Int?

  @@index([status, result])
}

model Move {
  id         String   @id @default(uuid())
  gameId     String
  moveNumber Int
  from       String
  to         String
  timeTaken  Int?     @default(0)
  playedAt   DateTime @default(now())
  game       Game     @relation(fields: [gameId], references: [id])

  @@index([gameId])
}

enum GameStatus {
  ACTIVE
  OVER
  PLAYER_LEFT
  ABANDONED
  TIME_UP
}

enum TimeControl {
  CLASSICAL
  RAPID
  BLITZ
  BULLET
  CUSTOM
}

enum GameResult {
  WHITE_WINS
  BLACK_WINS
  DRAW
}
